scale_x_continuous(transform = 'log2',
breaks = scales::trans_breaks("log2", \(x) 2^x))+
annotation_logticks(sides = 'b',
short = unit(1,"mm"),
mid = unit(2,"mm"),
long = unit(3,"mm"))+
theme_classic2()+
theme(axis.title = element_text(size = 10, color = 'black'),
axis.text = element_text(size = 8, color = 'black'),
axis.line = element_line(linewidth = 0),
axis.ticks = element_line(linewidth = 0.8),
legend.title = element_text(size = 10, color = 'black'),
legend.text = element_text(size = 8, color = 'black'),
panel.border = element_rect(color = "black",
fill = NA,
size = 0.8))
# auc vs norm_sel_coef
#Fig4D <-
ggplot(data = comp,
aes(x = rel_auc,y =med_GFP))+
geom_errorbarh(aes(xmin = rel_auc-sd.y,xmax = rel_auc+sd.y), color = 'darkgrey') +
geom_errorbar(aes(ymin = med_GFP-sd.x ,ymax = med_GFP+sd.x), color = 'darkgrey')+
geom_point(size =0.8) +
stat_cor(method = 'pearson', cor.coef.name = 'rho', size = 4, label.sep = '\n',
label.y = 7, label.x = -0.6)+
ylab('GFP signal (a.u.)')+
xlab('Avail. score')+
scale_x_continuous(transform = 'log2',
breaks = scales::trans_breaks("log2", \(x) 2^x))+
annotation_logticks(sides = 'b',
short = unit(1,"mm"),
mid = unit(2,"mm"),
long = unit(3,"mm"))+
theme_classic2()+
theme(axis.title = element_text(size = 10, color = 'black'),
axis.text = element_text(size = 8, color = 'black'),
axis.line = element_line(linewidth = 0),
axis.ticks = element_line(linewidth = 0.8),
legend.title = element_text(size = 10, color = 'black'),
legend.text = element_text(size = 8, color = 'black'),
panel.border = element_rect(color = "black",
fill = NA,
size = 0.8))
# auc vs norm_sel_coef
#Fig4D <-
ggplot(data = comp,
aes(x = rel_auc,y =med_GFP))+
geom_errorbarh(aes(xmin = rel_auc-sd.y,xmax = rel_auc+sd.y), color = 'darkgrey') +
geom_errorbar(aes(ymin = med_GFP-sd.x ,ymax = med_GFP+sd.x), color = 'darkgrey')+
geom_point(size =0.8) +
stat_cor(method = 'pearson', cor.coef.name = 'rho', size = 4, label.sep = '\n',
label.y = 7, label.x = -1)+
ylab('GFP signal (a.u.)')+
xlab('Avail. score')+
scale_x_continuous(transform = 'log2',
breaks = scales::trans_breaks("log2", \(x) 2^x))+
annotation_logticks(sides = 'b',
short = unit(1,"mm"),
mid = unit(2,"mm"),
long = unit(3,"mm"))+
theme_classic2()+
theme(axis.title = element_text(size = 10, color = 'black'),
axis.text = element_text(size = 8, color = 'black'),
axis.line = element_line(linewidth = 0),
axis.ticks = element_line(linewidth = 0.8),
legend.title = element_text(size = 10, color = 'black'),
legend.text = element_text(size = 8, color = 'black'),
panel.border = element_rect(color = "black",
fill = NA,
size = 0.8))
# auc vs norm_sel_coef
Fig4D <-
ggplot(data = comp,
aes(x = rel_auc,y =med_GFP))+
geom_errorbarh(aes(xmin = rel_auc-sd.y,xmax = rel_auc+sd.y), color = 'darkgrey') +
geom_errorbar(aes(ymin = med_GFP-sd.x ,ymax = med_GFP+sd.x), color = 'darkgrey')+
geom_point(size =0.8) +
stat_cor(method = 'pearson', cor.coef.name = 'rho', size = 4, label.sep = '\n',
label.y = 7, label.x = -1)+
ylab('GFP signal (a.u.)')+
xlab('Avail. score')+
scale_x_continuous(transform = 'log2',
breaks = scales::trans_breaks("log2", \(x) 2^x))+
annotation_logticks(sides = 'b',
short = unit(1,"mm"),
mid = unit(2,"mm"),
long = unit(3,"mm"))+
theme_classic2()+
theme(axis.title = element_text(size = 10, color = 'black'),
axis.text = element_text(size = 8, color = 'black'),
axis.line = element_line(linewidth = 0),
axis.ticks = element_line(linewidth = 0.8),
legend.title = element_text(size = 10, color = 'black'),
legend.text = element_text(size = 8, color = 'black'),
panel.border = element_rect(color = "black",
fill = NA,
size = 0.8))
ggsave('~/PL_projects/PL_papers/Scaffold_Letters/Figures/Fig4D.png', Fig4D, height = 2, width = 3)
# auc vs norm_sel_coef
Fig4D <-
ggplot(data = comp,
aes(x = rel_auc,y =med_GFP))+
geom_errorbarh(aes(xmin = rel_auc-sd.y,xmax = rel_auc+sd.y), color = 'darkgrey') +
geom_errorbar(aes(ymin = med_GFP-sd.x ,ymax = med_GFP+sd.x), color = 'darkgrey')+
geom_point(size =0.8) +
stat_cor(method = 'pearson', cor.coef.name = 'rho', size = 4, label.sep = '\n',
label.y = 7, label.x = -2)+
ylab('GFP signal (a.u.)')+
xlab('Avail. score')+
scale_x_continuous(transform = 'log2',
breaks = scales::trans_breaks("log2", \(x) 2^x))+
annotation_logticks(sides = 'b',
short = unit(1,"mm"),
mid = unit(2,"mm"),
long = unit(3,"mm"))+
theme_classic2()+
theme(axis.title = element_text(size = 10, color = 'black'),
axis.text = element_text(size = 8, color = 'black'),
axis.line = element_line(linewidth = 0),
axis.ticks = element_line(linewidth = 0.8),
legend.title = element_text(size = 10, color = 'black'),
legend.text = element_text(size = 8, color = 'black'),
panel.border = element_rect(color = "black",
fill = NA,
size = 0.8))
ggsave('~/PL_projects/PL_papers/Scaffold_Letters/Figures/Fig4D.png', Fig4D, height = 2, width = 3)
# auc vs norm_sel_coef
Fig4D <-
ggplot(data = comp,
aes(x = rel_auc,y =med_GFP))+
geom_errorbarh(aes(xmin = rel_auc-sd.y,xmax = rel_auc+sd.y), color = 'darkgrey') +
geom_errorbar(aes(ymin = med_GFP-sd.x ,ymax = med_GFP+sd.x), color = 'darkgrey')+
geom_point(size =0.8) +
stat_cor(method = 'pearson', cor.coef.name = 'rho', size = 4, label.sep = '\n',
label.y = 7, label.x = -1.5)+
ylab('GFP signal (a.u.)')+
xlab('Avail. score')+
scale_x_continuous(transform = 'log2',
breaks = scales::trans_breaks("log2", \(x) 2^x))+
annotation_logticks(sides = 'b',
short = unit(1,"mm"),
mid = unit(2,"mm"),
long = unit(3,"mm"))+
theme_classic2()+
theme(axis.title = element_text(size = 10, color = 'black'),
axis.text = element_text(size = 8, color = 'black'),
axis.line = element_line(linewidth = 0),
axis.ticks = element_line(linewidth = 0.8),
legend.title = element_text(size = 10, color = 'black'),
legend.text = element_text(size = 8, color = 'black'),
panel.border = element_rect(color = "black",
fill = NA,
size = 0.8))
ggsave('~/PL_projects/PL_papers/Scaffold_Letters/Figures/Fig4D.png', Fig4D, height = 2, width = 3)
setwd(dir = '~/PL_projects/PL_papers/Scaffold_Letters/Code/Scaffold_PCA/cytometry/')
# Validation of effect of peptides on protein abundance(GFP)
GFP_pep<-
read_csv('GFP_peptide_abundance.csv')
unique(GFP_pep$strain)
library(flowCore)
library(dplyr)
library(tidyr)
require(reshape2)
library(stringr)
library(mixtools)
library(magrittr)
library(tidyverse)
#plate index
setwd("~/PL_projects/cytometry/")
strains_plate_PFA <- readr::read_delim(file = './plan_27092025_1.csv', delim = ',')
colnames(strains_plate_PFA) <- c('strain','rep', 'position','file_fcs', 'estradiol')
strains_plate_PFA$file_fcs <- gsub('"', '', strains_plate_PFA$file_fcs)
strains_plate_PFA$file_fcs <- as.numeric(strains_plate_PFA$file_fcs)
colnames(strains_plate_PFA) <- c('strain','position','file_fcs')
strains_plate_PFA$file_fcs <- gsub('"', '', strains_plate_PFA$file_fcs)
strains_plate_PFA$file_fcs <- as.numeric(strains_plate_PFA$file_fcs)
setwd("2025-09-15_at_02-49-34pm/")
#plate index
setwd("~/PL_projects/cytometry/")
setwd("2025-09-27_at_03-24-50pm/")
file = dir(pattern="fcs")
file
all_fcs <- NULL
for(i in 1:length(file)){
d = read.FCS(file[i], emptyValue = FALSE)
df = as.data.frame(exprs(d)[,1:ncol(d)])
file_number= strsplit(strsplit(file[i], ".", fixed = T)[[1]][1],"-", fixed = T) [[1]] %>% tail(n=1) %>% as.numeric()
str <-  dplyr::filter(strains_plate_PFA,file_fcs == file_number)
str$file <- file[i]
str$no <- i
ech1 = cbind(str, df[,1:12]) #this may depend on which values from the fcs you want.
all_fcs <- rbind(all_fcs,ech1)
}
GFP1 <- all_fcs
c <- colnames(all_fcs) %>% str_replace_all("-", ".")
colnames(all_fcs) <- c
GFP1 <- all_fcs
strains_plate_PFA <- readr::read_delim(file = './plan_27092025_2.csv', delim = ',')
#plate index
setwd("~/PL_projects/cytometry/")
strains_plate_PFA <- readr::read_delim(file = './plan_27092025_2.csv', delim = ',')
colnames(strains_plate_PFA) <- c('strain','position','file_fcs')
strains_plate_PFA$file_fcs <- gsub('"', '', strains_plate_PFA$file_fcs)
strains_plate_PFA$file_fcs <- as.numeric(strains_plate_PFA$file_fcs)
setwd("2025-09-27_at_04-14-35pm/")
file = dir(pattern="fcs")
file
#plate index
setwd("~/PL_projects/cytometry/")
setwd("2025-09-27_at_03-24-50pm/")
file = dir(pattern="fcs")
file
all_fcs <- NULL
for(i in 1:length(file)){
d = read.FCS(file[i], emptyValue = FALSE)
df = as.data.frame(exprs(d)[,1:ncol(d)])
file_number= strsplit(strsplit(file[i], ".", fixed = T)[[1]][1],"-", fixed = T) [[1]] %>% tail(n=1) %>% as.numeric()
str <-  dplyr::filter(strains_plate_PFA,file_fcs == file_number)
str$file <- file[i]
str$no <- i
ech1 = cbind(str, df[,1:12]) #this may depend on which values from the fcs you want.
all_fcs <- rbind(all_fcs,ech1)
}
c <- colnames(all_fcs) %>% str_replace_all("-", ".")
colnames(all_fcs) <- c
GFP1 <- all_fcs
all_fcs <- rbind(GFP1, GFP2)
#plate index
setwd("~/PL_projects/cytometry/")
strains_plate_PFA <- readr::read_delim(file = './plan_27092025_1.csv', delim = ',')
colnames(strains_plate_PFA) <- c('strain','position','file_fcs')
strains_plate_PFA$file_fcs <- gsub('"', '', strains_plate_PFA$file_fcs)
strains_plate_PFA$file_fcs <- as.numeric(strains_plate_PFA$file_fcs)
setwd("2025-09-27_at_03-24-50pm/")
#plate index
setwd("~/PL_projects/cytometry/")
setwd("2025-09-27_at_04-14-35pm/")
file = dir(pattern="fcs")
file
all_fcs <- NULL
for(i in 1:length(file)){
d = read.FCS(file[i], emptyValue = FALSE)
df = as.data.frame(exprs(d)[,1:ncol(d)])
file_number= strsplit(strsplit(file[i], ".", fixed = T)[[1]][1],"-", fixed = T) [[1]] %>% tail(n=1) %>% as.numeric()
str <-  dplyr::filter(strains_plate_PFA,file_fcs == file_number)
str$file <- file[i]
str$no <- i
ech1 = cbind(str, df[,1:12]) #this may depend on which values from the fcs you want.
all_fcs <- rbind(all_fcs,ech1)
}
c <- colnames(all_fcs) %>% str_replace_all("-", ".")
colnames(all_fcs) <- c
GFP2 <- all_fcs
all_fcs <- rbind(GFP1, GFP2)
#path and name of your output csv file
csv_name = "../GFP_27092025.csv"
write.csv(all_fcs, csv_name, row.names = FALSE, quote = F)
GFP_data <-
read.csv('GFP_15092025.csv')
setwd(dir = '~/PL_projects/cytometry/')
GFP_data <-
read.csv('GFP_15092025.csv')
## check degradation of GFP (with the first few sequences)
GFP_data_2 <-
read.csv('GFP_09062025.csv')
GFP_data_2%>%
subset(strain != 'LP-GFP' ) -> degron_GFP
degron_GFP[degron_GFP$position %in% c('H3', 'H4', 'H5') &degron_GFP$media == 'SC-URA', 'strain'] <- '304_4'
ggplot(degron_GFP)+
facet_grid(rows = vars(strain))+
geom_density(aes(x = log10(GRN.B.HLin), color =as.factor(rep)))#+
GFP_data_3 <-
read.csv('GFP_27092025.csv')
View(GFP_data_3)
grepl('_', GFP_data_3$strain)
GFP_data_3[grepl('_', GFP_data_3$strain), ]
unique(GFP_data_3$strain)
degron_2<-
GFP_data_3[grepl('_', GFP_data_3$strain), ]
bind_rows(degron_GFP, degron_2)
all_degron<-
bind_rows(degron_GFP, degron_2)
write_csv(all_degron, '~/PL_projects/PL_papers/Scaffold_Letters/Code/Scaffold_PCA/cytometry/GFP_peptide_abundance2.csv')
setwd(dir = '~/PL_projects/PL_papers/Scaffold_Letters/Code/Scaffold_PCA/cytometry/')
# Validation of effect of peptides on protein abundance(GFP)
GFP_pep<-
read_csv('GFP_peptide_abundance2.csv')
ggplot(GFP_pep)+
facet_grid(rows = vars(strain), cols = vars(media))+
geom_density(aes(x = log10(GRN.B.HLin), color =as.factor(rep)))
## check degradation of GFP (with the first few sequences)
GFP_data_2 <-
read.csv('GFP_09062025.csv')
setwd(dir = '~/PL_projects/cytometry/')
GFP_data <-
read.csv('GFP_15092025.csv')
GFP_data%>%
subset(strain != 'LP-GFP') -> degron
## check degradation of GFP (with the first few sequences)
GFP_data_2 <-
read.csv('GFP_09062025.csv')
GFP_data_2%>%
subset(strain != 'LP-GFP' ) -> degron_GFP
degron_GFP[degron_GFP$position %in% c('H3', 'H4', 'H5') &degron_GFP$media == 'SC-URA', 'strain'] <- '304_4'
ggplot(degron_GFP)+
facet_grid(rows = vars(strain))+
geom_density(aes(x = log10(GRN.B.HLin), color =as.factor(rep)))#+
GFP_data_3 <-
read.csv('GFP_27092025.csv')
degron_2<-
GFP_data_3[grepl('_', GFP_data_3$strain), ]
degron_2$media <- 'SC-URA'
#all_degron<-
bind_rows(degron_GFP, degron_2)
GFP_data_2%>%
subset(strain != 'LP-GFP' )%>%
select(-estradiol)-> degron_GFP
degron_GFP[degron_GFP$position %in% c('H3', 'H4', 'H5') &degron_GFP$media == 'SC-URA', 'strain'] <- '304_4'
ggplot(degron_GFP)+
facet_grid(rows = vars(strain))+
geom_density(aes(x = log10(GRN.B.HLin), color =as.factor(rep)))#+
View(degron_GFP)
GFP_data <-
read.csv('GFP_15092025.csv')
GFP_data <-
read.csv('GFP_15092025.csv')
GFP_data%>%
subset(strain != 'LP-GFP') -> degron
GFP_data$rep <- as.factor(GFP_data$rep)
ggplot(GFP_data)+
facet_grid(rows = vars(seq_pep))+
geom_density(aes(x = log10(GRN.B.HLin), color =as.factor(rep)))
GFP_data%>%
group_by(pos)%>%
mutate(med_GFP = median(GRN.B.HLin), na.rm = TRUE)%>%
select(seq_pep, type_pep, dna_pep, pos, replicate, med_GFP)%>%
unique()->simple_GFP
ggplot(simple_GFP)+
geom_jitter(aes(x=seq_pep, y=log2(med_GFP)), width = 0.1)+
theme_classic()
## check degradation of GFP (with the first few sequences)
GFP_data_2 <-
read.csv('GFP_09062025.csv')
GFP_data_2%>%
subset(strain != 'LP-GFP' )%>%
select(-estradiol)-> degron_GFP
View(degron_GFP)
table(degron_GFP$position)
table(degron_GFP$strain)
GFP_data_2%>%
subset(strain != 'LP-GFP' )%>%
select(-estradiol)-> degron_GFP
degron_GFP[degron_GFP$position %in% c('H3', 'H4', 'H5') & degron_GFP$media == 'SC-URA', 'strain'] <- '304_4'
ggplot(degron_GFP)+
facet_grid(rows = vars(strain))+
geom_density(aes(x = log10(GRN.B.HLin), color =as.factor(rep)))#+
table(degron_GFP$strain)
degron_GFP[degron_GFP$position %in% c('H3', 'H4', 'H5'), 'strain'] <- '304_4'
table(degron_GFP$strain)
GFP_data_3 <-
read.csv('GFP_27092025.csv')
degron_2<-
GFP_data_3[grepl('_', GFP_data_3$strain), ]
#all_degron<-
bind_rows(degron_GFP, degron_2)
all_degron<-
bind_rows(degron_GFP, degron_2)
write_csv(all_degron, '~/PL_projects/PL_papers/Scaffold_Letters/Code/Scaffold_PCA/cytometry/GFP_peptide_abundance2.csv')
setwd(dir = '~/PL_projects/PL_papers/Scaffold_Letters/Code/Scaffold_PCA/cytometry/')
# Validation of effect of peptides on protein abundance(GFP)
GFP_pep<-
read_csv('GFP_peptide_abundance2.csv')
ggplot(GFP_pep)+
facet_grid(rows = vars(strain), cols = vars(media))+
geom_density(aes(x = log10(GRN.B.HLin), color =as.factor(rep)))
GFP_pep%>%
dplyr::group_by(strain, position)%>%
dplyr::mutate(med_GFP = median(GRN.B.HLin), na.rm = TRUE)%>%
select(strain, position, rep, med_GFP)%>%
unique()->simple_degron_GFP
# No strong effect of media, keep SC-URA
ggplot(simple_degron_GFP)+
geom_jitter(aes(x=strain, y=med_GFP, color = media), width = 0.1)+
theme_classic()
# No strong effect of media, keep SC-URA
ggplot(simple_degron_GFP)+
geom_jitter(aes(x=strain, y=med_GFP), width = 0.1)+
theme_classic()
# compare with growth curves measurements of binding availability
# for the peptides extracted from the PRM DB
gc_data <-
read_csv('../growthcurves_analysis/gc_data/condensed_new_PBD-peptides.csv')[,-1]
gc_data%>%
subset(D12 =='empty' & D3 == 'empty' & strain == 'PL17' )%>%
dplyr::mutate(ref_auc = mean(auc))%>%
select(ref_auc)%>%
unlist()%>%
unique-> ref_auc_1
# for the peptides previously used in synthetic scaffold
gc_data_scaffold <- read_csv('../growthcurves_analysis/gc_data/condensed_availability.csv')
gc_data_scaffold%>%
subset(D12 =='empty' & D3 == 'empty' & strain == 'BY4741-mVenus-D12'& condition == 'MTX')%>%
dplyr::mutate(ref_auc = mean(auc))%>%
select(ref_auc)%>%
unlist()%>%
unique-> ref_auc_2
sub_Scaf <-
gc_data_scaffold[gc_data_scaffold$D3 %in% c('sh3.1', 'pdz.2') & gc_data_scaffold$condition == 'MTX', ]
# compute Avail. score for both growth curves experiments.
gc_data%<>%
subset(strain == 'PL17')%>%
dplyr::mutate(rel_auc= auc/ref_auc_1)
sub_Scaf%<>%
dplyr::mutate(rel_auc= auc/ref_auc_2)
# merge both experiments
ref_sequences <- read_csv('../growthcurves_analysis/gc_data/new_PBD-peptides_sequences.csv')
ref_sequences$name <-
gsub(pattern = 'PRM_0', '', ref_sequences$name)
gc_data$D3 <-
gsub(gc_data$D3, pattern = 'PRM_0', replacement = '')
avail_sub <-
gc_data[gc_data$D3 %in% simple_degron_GFP$strain, ]
avail_sub <-
bind_rows(avail_sub, sub_Scaf)
# function to compute standard deviation per aa_sequence
#+++++++++++++++++++++++++
# Function to calculate the mean and the standard deviation
# for each group
#+++++++++++++++++++++++++
# data : a data frame
# varname : the name of a column containing the variable
#to be summariezed
# groupnames : vector of column names to be used as
# grouping variables
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
# compute summary of growth curve replicates
avail_sum <-
data_summary(avail_sub, 'rel_auc', 'D3')
# compute summary of cytometry replicates
gfp_sum <-
data_summary(simple_degron_GFP, 'med_GFP', 'strain')
# merge summaries of growth curves and cytometry measurements
comp <-
left_join(gfp_sum,
avail_sum,
join_by(strain ==  D3),
unmatched = 'drop')
# auc vs norm_sel_coef
#Fig4D <-
ggplot(data = comp,
aes(x = rel_auc,y =med_GFP))+
geom_errorbarh(aes(xmin = rel_auc-sd.y,xmax = rel_auc+sd.y), color = 'darkgrey') +
geom_errorbar(aes(ymin = med_GFP-sd.x ,ymax = med_GFP+sd.x), color = 'darkgrey')+
geom_point(size =0.8) +
stat_cor(method = 'pearson', cor.coef.name = 'rho', size = 4, label.sep = '\n',
label.y = 7, label.x = -1.5)+
ylab('GFP signal (a.u.)')+
xlab('Avail. score')+
scale_x_continuous(transform = 'log2',
breaks = scales::trans_breaks("log2", \(x) 2^x))+
annotation_logticks(sides = 'b',
short = unit(1,"mm"),
mid = unit(2,"mm"),
long = unit(3,"mm"))+
theme_classic2()+
theme(axis.title = element_text(size = 10, color = 'black'),
axis.text = element_text(size = 8, color = 'black'),
axis.line = element_line(linewidth = 0),
axis.ticks = element_line(linewidth = 0.8),
legend.title = element_text(size = 10, color = 'black'),
legend.text = element_text(size = 8, color = 'black'),
panel.border = element_rect(color = "black",
fill = NA,
size = 0.8))
# auc vs norm_sel_coef
Fig4D <-
ggplot(data = comp,
aes(x = rel_auc,y =med_GFP))+
geom_errorbarh(aes(xmin = rel_auc-sd.y,xmax = rel_auc+sd.y), color = 'darkgrey') +
geom_errorbar(aes(ymin = med_GFP-sd.x ,ymax = med_GFP+sd.x), color = 'darkgrey')+
geom_point(size =0.8) +
stat_cor(method = 'pearson', cor.coef.name = 'rho', size = 4, label.sep = '\n',
label.y = 7, label.x = -1.5)+
ylab('GFP signal (a.u.)')+
xlab('Avail. score')+
scale_x_continuous(transform = 'log2',
breaks = scales::trans_breaks("log2", \(x) 2^x))+
annotation_logticks(sides = 'b',
short = unit(1,"mm"),
mid = unit(2,"mm"),
long = unit(3,"mm"))+
theme_classic2()+
theme(axis.title = element_text(size = 10, color = 'black'),
axis.text = element_text(size = 8, color = 'black'),
axis.line = element_line(linewidth = 0),
axis.ticks = element_line(linewidth = 0.8),
legend.title = element_text(size = 10, color = 'black'),
legend.text = element_text(size = 8, color = 'black'),
panel.border = element_rect(color = "black",
fill = NA,
size = 0.8))
ggsave('~/PL_projects/PL_papers/Scaffold_Letters/Figures/Fig4D.png', Fig4D, height = 2, width = 3)
